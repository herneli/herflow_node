{"version":3,"sources":["../src/server.js"],"names":["debug","require","config","port","normalizePort","process","env","PORT","app","set","server","http","createServer","models","sequelize","sync","then","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","exit","addr","address"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,QAAQC,QAAQ,OAAR,EAAiB,oBAAjB,CAAZ;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA;;;;AAIA,IAAIC,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;AACAC,cAAIC,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;;AAEA;;;;AAIA,IAAIO,SAASC,eAAKC,YAAL,CAAkBJ,aAAlB,CAAb;;AAEA;;;AAGAK,iBAAOC,SAAP,CAAiBC,IAAjB,GAAwBC,IAAxB,CAA6B,YAAW;AACtCN,SAAOO,MAAP,CAAcd,IAAd;AACAO,SAAOQ,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAT,SAAOQ,EAAP,CAAU,WAAV,EAAuBE,WAAvB;AACD,CAJD;;AAMA;;;;AAIA,SAAShB,aAAT,CAAuBiB,GAAvB,EAA4B;AAC1B,MAAIlB,OAAOmB,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMpB,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOkB,GAAP;AACD;;AAED,MAAIlB,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASgB,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAIE,OAAO,OAAOvB,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,IAAjE;;AAEA;AACA,UAAQqB,MAAMG,IAAd;AACE,SAAK,QAAL;AACEC,cAAQJ,KAAR,CAAcE,OAAO,+BAArB;AACArB,cAAQwB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACED,cAAQJ,KAAR,CAAcE,OAAO,oBAArB;AACArB,cAAQwB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAML,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACrB,MAAIU,OAAOpB,OAAOqB,OAAP,EAAX;AACA,MAAIL,OAAO,OAAOI,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,KAAK3B,IAAtE;AACAH,QAAM,kBAAkB0B,IAAxB;AACD","file":"server.js","sourcesContent":["import app from \"./app\";\nimport http from \"http\";\nimport models from \"./models\";\n\nvar debug = require(\"debug\")(\"herflow:src:server\");\nrequire(\"dotenv\").config();\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || \"3000\");\napp.set(\"port\", port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces after sequelize is ready\n */\nmodels.sequelize.sync().then(function() {\n  server.listen(port);\n  server.on(\"error\", onError);\n  server.on(\"listening\", onListening);\n});\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== \"listen\") {\n    throw error;\n  }\n\n  var bind = typeof port === \"string\" ? \"Pipe \" + port : \"Port \" + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case \"EACCES\":\n      console.error(bind + \" requires elevated privileges\");\n      process.exit(1);\n      break;\n    case \"EADDRINUSE\":\n      console.error(bind + \" is already in use\");\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === \"string\" ? \"pipe \" + addr : \"port \" + addr.port;\n  debug(\"Listening on \" + bind);\n}\n"]}